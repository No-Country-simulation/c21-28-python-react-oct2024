networks :
    c-21-28_network :
        driver: bridge
        name: c-21-28_network
        attachable: true
        external: false 
        enable_ipv6: false

services:

  c-21-28.cert-gen:
    container_name: c-21-28.cert-gen
    image: alpine
    logging:
      options:
        max-size: 10m
        max-file: "3"
    volumes:
      - ./.data/certs:/certs
    hostname: cert-gen
    networks:
      c-21-28_network: {}
#     api_modules_network : 
#         ipv4_address: 10.10.0.5
    entrypoint:
      - /bin/sh
      - -c
      - |
        apk add --no-cache openssl &&
        openssl genpkey -algorithm RSA -out /certs/mysql/mysql.key -pkeyopt rsa_keygen_bits:2048 &&
        openssl req -new -key /certs/mysql/mysql.key -out /certs/mysql/mysql.csr -subj "/CN=mysql/O=myorg/C=US" &&
        openssl x509 -req -in /certs/mysql/mysql.csr -signkey /certs/mysql/mysql.key -out /certs/mysql/mysql.crt -days 365 &&
        openssl genpkey -algorithm RSA -out /certs/ca.key -pkeyopt rsa_keygen_bits:2048 &&
        openssl req -new -x509 -key /certs/ca.key -out /certs/ca.crt -days 1095 -subj "/CN=Certificate Authority/O=myorg/C=US" &&
        chmod 600 /certs/* && chown 999:999 /certs/*
    restart: "no"
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: "0.50"
          memory: 32M
        reservations:
          cpus: "0.25"
          memory: 16M 

  c-21-28.mysql:
    container_name: c-21-28.mysql
    image : mysql:5.7.44
    logging:
      options:
        max-size: 10m
        max-file: "3"
    restart: always
    ports: 
      - ${DB_PORT}:${DB_PORT}/tcp
    networks:
      c-21-28_network: {}
    volumes:
      - ./.data/mysql:/var/lib/mysql
      - ./.data/logs/mysql:/var/log/mysql
      - ./.data/bck/mysql:/home 
      - ./.data/certs/mysql:/etc/mysql/certs
    env_file:
      - ./.env
    command: 
         - --pid-file=/run/mysqld.pid
         - --character-set-server=utf8mb4
         - --collation-server=utf8mb4_unicode_ci
         - --skip-character-set-client-handshake=1
         - --explicit_defaults_for_timestamp=ON
         - --lower_case_table_names=2
         - --table_definition_cache=400
         - --performance_schema=0
         - --default-authentication-plugin=mysql_native_password
         - --innodb_use_native_aio=0
         - --tls-version=TLSv1.2
         - --ssl-ca=/etc/mysql/certs/ca.crt
         - --ssl-cert=/etc/mysql/certs/mysql.crt
         - --ssl-key=/etc/mysql/certs/mysql.key
         - --ssl=1
         - --bind-address=0.0.0.0
         - --query_cache_size=16M
         - --expire_logs_days=10
         - --default-time-zone=+00:00
         #- --log_error=/var/log/mysql/error.log 
         #- --default-time-zone="+03:00"
    environment:
      MYSQL_DATABASE : ${DB_DATABASE}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD} 
    healthcheck:
      test: out=$$(mysqladmin ping -h localhost -P $$MYSQL_PORT_OUT -u $$DB_USERNAME --password=$$DB_PASSWORD 2>&1); echo $$out | grep 'mysqld is alive' || { echo $$out; exit 1; }
      #test: mysqladmin ping -h 127.0.0.1 -u $$DB_USERNAME --password=$$DB_PASSWORD
      start_period: 5s
      interval: 10s
      timeout: 5s
      retries: 55
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: "1"
          memory: 1G
        reservations:
          cpus: "0.50"
          memory: 512M   
 
  c-21-28.back.shell:
    container_name: c-21-28.back.shell
    logging:
      options:
        max-size: 10m
        max-file: "3"
    #image: ar_dev_py_django
    build:
      #context: ./src/back/services
      #dockerfile: ../../../Dockerfile
      context: .
      dockerfile: Dockerfile
      target: ar_dev_py_django
      args:
        - API_N=1  
    #hostname: django
    #command: sh -c "python3 manage.py migrate --noinput && python3 manage.py collectstatic --noinput && python manage.py runserver 0.0.0.0:8000"
    restart: always
    ports: 
      #- ${API_PORT}:${API_PORT_OUT}/tcp
      - 8000:8000
      - 9229:9229
      - 9230:9230
    networks:
      c-21-28_network: {}
    volumes:
      - ./src/back/services:/home/python/app
      #- ./src/back/home:/home  
    env_file:
      - ./.env 
    #depends_on:
    #  c-21-28.mysql:
    #    condition: service_healthy
    develop:
      watch:
        - action: sync
          path: ./src/back/services
          target: /home/python/app
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: "1"
          memory: 1G
        reservations:
          cpus: "0.50"
          memory: 512M 

  c-21-28.django:
    container_name: django
    logging:
      options:
        max-size: 10m
        max-file: "3" 
    build:
      context: ./src/back/django
      dockerfile: ../../../Dockerfile
      target: ar_dev_py_django
    #command: sh -c "python3 manage.py migrate --noinput && python manage.py runserver 0.0.0.0:8000"
    restart: always
    ports: 
      #- ${API_PORT}:${API_PORT_OUT}/tcp
      - 8000:8000
      - 9229:9229
      - 9230:9230
    networks:
      c-21-28_network: {}
    volumes:
      - ./src/back/django:/home/python/app
      - ./env/back/django:/home/python/app/venv
    env_file:
      - ./.env 
    develop:
      watch:
        - action: sync
          path: ./src/back/django
          target: /home/python/app
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: "1"
          memory: 1G
        reservations:
          cpus: "0.50"
          memory: 512M